<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gang.L</title>
  
  <subtitle>当人们发现了镜子，&lt;br&gt;他们开始失去了灵魂！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-23T15:47:14.351Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>二月花</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动态爬虫 selenium 获取QQ号</title>
    <link href="http://yoursite.com/2019/09/17/selenium-get-qq-num/"/>
    <id>http://yoursite.com/2019/09/17/selenium-get-qq-num/</id>
    <published>2019-09-17T15:38:06.000Z</published>
    <updated>2020-04-23T15:47:14.351Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>某天，小李突发奇想，想获取一个qq群里所有人的qq号「反正有用」。目前的办法是点开每个人的个人信息，慢慢复制qq号。好在这个群比较小，只有接近60人，一个一个复制是可操作的，但是小李的逼格不允许他这么做。在网上找了一番解决办法，发现<a href="https://qun.qq.com/" target="_blank" rel="noopener">qq群官网</a>好像可以直接看每个人的qq，试着能不能直接复制，是的，可以的话就没有这篇博客了。</p><a id="more"></a><h2 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h2><p>selenium是一个python爬虫的库，主要用来爬取动态页面的数据，具体用代码就是模拟人的操作，代码要干什么就能让鼠标干什么（如快速登录、输入账号和密码、点开图片、下载图片等），怎么说呢？快速上手就按网址顺序过一下吧！</p><blockquote><ol><li><a href="https://selenium-python-zh.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">Selenium with Python中文翻译文档</a> </li><li><a href="https://www.cnblogs.com/zhaof/p/6953241.html" target="_blank" rel="noopener">python爬虫从入门到放弃之 Selenium库的使用</a></li><li><a href="https://blog.csdn.net/w_lo__o/article/details/81038497" target="_blank" rel="noopener">Selenium with Python 函数讲解</a></li><li><a href="https://selenium-python.readthedocs.io/" target="_blank" rel="noopener">Selenium with Python</a></li></ol></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="进入qq群"><a href="#进入qq群" class="headerlink" title="进入qq群"></a>进入qq群</h3><blockquote><ol><li>打开<a href="https://qun.qq.com/" target="_blank" rel="noopener">qq群官网</a></li><li>登上电脑qq</li><li>点击快速登录</li><li>点击群管理</li><li>点击成员管理</li><li>点击相应的群</li></ol></blockquote><h3 id="复制qq号"><a href="#复制qq号" class="headerlink" title="复制qq号"></a>复制qq号</h3><blockquote><ol><li>复制第一页qq号</li><li>鼠标滚动至页底</li><li>复制第二页qq号</li><li>重复2、3，直到结束</li></ol></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment"># 参数是Chromedrive的路径</span></span><br><span class="line">driver = webdriver.Chrome(<span class="string">"/Users/ligang/Public/chromedriver"</span>)</span><br><span class="line"><span class="comment"># 打开QQ群官网</span></span><br><span class="line">driver.get(<span class="string">"https://qun.qq.com/"</span>)</span><br><span class="line"><span class="comment"># 点一下登录</span></span><br><span class="line">driver.find_element_by_class_name(<span class="string">"user-info"</span>).click()</span><br><span class="line"><span class="comment"># 等待5毫秒，让登录页面显示出来</span></span><br><span class="line">driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到iframe</span></span><br><span class="line">driver.switch_to_frame(<span class="string">"login_frame"</span>)</span><br><span class="line"><span class="comment"># 点击图片 快速登录</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"img_out_790955169"</span>).click()</span><br><span class="line"><span class="comment"># 点击群管理</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">'//*[@id="headerNav"]/li[4]/a'</span>).click()</span><br><span class="line"><span class="comment"># 点击成员管理</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">"/html/body/div[3]/ul/li[1]/a"</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求窗口具柄</span></span><br><span class="line">windows = driver.window_handles</span><br><span class="line"><span class="comment"># 切换到新打开的页面</span></span><br><span class="line">driver.switch_to_window(windows[<span class="number">-1</span>])</span><br><span class="line"><span class="comment"># 点击所要管理的QQ群</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">"/html/body/div[5]/div[2]/div/div[2]/ul[1]/li[4]"</span>).click()</span><br><span class="line"><span class="comment"># 刷新一次，保证页面是正确的</span></span><br><span class="line">driver.refresh()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据标签的规律 tbody[i]的i=2，3，4</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]:</span><br><span class="line">    <span class="comment"># 找到相应qq的标签 是一个element列表</span></span><br><span class="line">    QQ = driver.find_elements_by_xpath(<span class="string">'//*[@id="groupMember"]/tbody['</span>+ str(i) +<span class="string">']/tr/td[5]'</span>)</span><br><span class="line">    <span class="comment"># 打印列表中的每个element的内容</span></span><br><span class="line">    <span class="keyword">for</span> qq <span class="keyword">in</span> QQ:</span><br><span class="line">        print(qq.text)</span><br><span class="line">    <span class="comment"># 让浏览器滚动到底部 触发事件 让其显示剩下的QQ号</span></span><br><span class="line">    driver.execute_script(<span class="string">"window.scrollTo(0,document.body.scrollHeight)"</span>)</span><br><span class="line">    <span class="comment"># 沉睡2秒 让浏览器加载下面的内容</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://i.loli.net/2020/04/23/fT8S7qDKjhIMQ6R.png" alt="结果"></p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><blockquote><ol><li>直接输出有点尬，输出可以用excel表；</li><li>使用selenium应尽量减少操作，中断页面加载，配置testNG实现多线程。</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;某天，小李突发奇想，想获取一个qq群里所有人的qq号「反正有用」。目前的办法是点开每个人的个人信息，慢慢复制qq号。好在这个群比较小，只有接近60人，一个一个复制是可操作的，但是小李的逼格不允许他这么做。在网上找了一番解决办法，发现&lt;a href=&quot;https://qun.qq.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;qq群官网&lt;/a&gt;好像可以直接看每个人的qq，试着能不能直接复制，是的，可以的话就没有这篇博客了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="selenium" scheme="http://yoursite.com/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>把CodeRunner3编译latex默认的pdflatex改为xelatex</title>
    <link href="http://yoursite.com/2019/09/10/codeRunner/"/>
    <id>http://yoursite.com/2019/09/10/codeRunner/</id>
    <published>2019-09-10T13:59:44.807Z</published>
    <updated>2019-09-18T07:37:26.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>首先，这是关于mac的一个小编程软件CodeRunner3的一个故事，如果没有装这个软件，自然也没这个问题。</li><li>其次，这是想用CodeRunner简单写一点latex，然而由不能编译运行中文而产生的问题。</li><li>再次，既然写了，就必须推荐一下这个CodeRunner软件（ps：只支持mac用户，没有Windows版的~）我装的是CodeRunner3，前天用的还是CodeRunner2，觉得版本高一点可能好用些吧！（其实差不多，好像是多添加了几门支持的编程语言）</li></ul><a id="more"></a><p><strong>1. 主界面</strong><br><img src="https://img-blog.csdnimg.cn/20190102000607361.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE2MDIxNQ==,size_16,color_FFFFFF,t_70" alt="主界面"><br><strong>2. 支持语言</strong><br><img src="https://img-blog.csdnimg.cn/20190101234949969.jpg" alt="支持语言大概20多种"><br>其支持的语言大概有20多种，这软件有什么好处呢？学生党应该都知道，vs太麻烦，敲几行都要先创工程，atom、sublime、vs code这些代码编辑器确实挺好用，但没有集成编译的环境，还要去teminal编译运行。不说其他的，每次还要先进入文件夹，再编译啥的。因为我常用c++，mac下的Xcode确实不错，但也是一样，每次的创工程还是感觉不太方便。以上纯属个人牢骚，大佬可跳过..<br>bling..一个偶然的机会下载到了CodeRunner2，我觉得找到真爱了，对于学生的我，正好需要搞一搞各种语言，这软件不仅是一个简单的支持多种语言的IDE，各种语言都支持代码高亮、自动补全，包括一些常用编程用的一些快捷操作，代码缩进，复制或者删除一行等等吧。心动的可以下一个，破解版不难找的。</p><h2 id="CodeRunner3编译LaTex"><a href="#CodeRunner3编译LaTex" class="headerlink" title="CodeRunner3编译LaTex"></a>CodeRunner3编译LaTex</h2><p>交作业或者写论文也常用latex，但我们常常需要让latex可以识别中文，这也就涉及到了xelatex和{ctex}中文包了，但一开始CodeRunner默认编译是用的pdflatex，是不能编译中文的。</p><p><strong>插个话，</strong><br>其实我也下载了mac版的<em>texstudio</em>，也挺好用的，只要perferences-&gt;构建-&gt;默认编译器-&gt;XeLaTex，点确定就可以编译运行中文了。</p><p>那有了texstudio还写这篇博文干嘛！不好意思，额..我有点强迫症！CodeRunner明明支持latex，那为啥就不能编译运行呢？于是我开始在网上搜类似的内容，于是我开始搜<span style="background-color: yellow">怎么把codeRunner编译latex改成xelatex</span>，哎~搜不到，进入正题！</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>点CodeRunner的preferences-&gt;languages-&gt;LaTex<br><img src="https://img-blog.csdnimg.cn/20190102012427460.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE2MDIxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击Edit Script，出现下面的编译配置文件：<br><img src="https://img-blog.csdnimg.cn/20190102094525272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE2MDIxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果你对latex编译敏感的话，你会发现第25行的output是用pdflatex编译输出的，如果你运行不了中文的，编译应该会出错。<br><img src="https://img-blog.csdnimg.cn/20190102095038336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE2MDIxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>照理，大家应该都会复制黄框里面的内容去网上找解决方案，不过应该找不到，CodeRunner用的人好像不多的样子，用CodeRunner来编译latex人更不多，Google上找到一张用CodeRunner写latex的一张图，但是没写到和我这样的情况。</p><p><span style="background-color: yellow">话不多说，接下来才是重点！！</span></p><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>我的想法是编译文件应该都在一起，那我应该找到pdflatex放在哪？看看里面还有其他什么文件，不就知道还存在其他什么编译选项了么！！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ locate pdflatex</span><br></pre></td></tr></table></figure><p>在teminal中定位pdflatex文件。结果如下：<br><img src="https://img-blog.csdnimg.cn/20190102101535768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE2MDIxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们看到红色框里面的内容，我觉得这应该就是编译的格式文件，但是我要找xelatex，于是我进入pdflatex.fmt的上两层目录，ls过后发现有一个xetex。注意！这可不是要改的内容。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> xelex</span><br><span class="line">$ ls</span><br></pre></td></tr></table></figure><p>效果图如下：<img src="https://img-blog.csdnimg.cn/20190102102326892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE2MDIxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>于是就找到了xelatex.fmt！</p><p><span style="background-color: yellow">上面的内容可以跳过，看这边！</span></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>回到 <code>output = &quot;pdflatex ···&quot;</code></p><p>在上一节的想法中我们找到了xelatex.fmt文件，那是不是将pdflatex直接换成xelatex就行了！<br><img src="https://img-blog.csdnimg.cn/20190102103009844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE2MDIxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>于是再次编译运行一下！<br><img src="https://img-blog.csdnimg.cn/20190102103115968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE2MDIxNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="补充一下"><a href="#补充一下" class="headerlink" title="补充一下"></a>补充一下</h3><ol><li>你刚用的<code>CodeRunner</code>可能是用不了<code>latex</code>的，它会让你装<code>MacTex</code>，其实我中途装了一下<code>MacTex</code>过，然后觉得不好卸载了，但是此后latex也能用了。可能<code>CodeRunner</code>自己复制保存什么<code>MacTex</code>的一些文件吧！</li><li><code>locate</code>命令一开始是不能用的，可以参考 <a href="https://blog.csdn.net/caiqiiqi/article/details/83189414" target="_blank" rel="noopener">嘿嘿！</a></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>找到<code>CodeRunner</code>的<code>latex</code>编译文件<code>perferences-&gt;languages-&gt;LaTex-&gt;Edit Script</code></li><li>将<code>25</code>行的<code>output</code>中的<code>pdflatex</code>换成<code>xelatex</code>，保存。</li><li>重新编译运行，就可以显示中文了。</li></ol><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首先，这是关于mac的一个小编程软件CodeRunner3的一个故事，如果没有装这个软件，自然也没这个问题。&lt;/li&gt;
&lt;li&gt;其次，这是想用CodeRunner简单写一点latex，然而由不能编译运行中文而产生的问题。&lt;/li&gt;
&lt;li&gt;再次，既然写了，就必须推荐一下这个CodeRunner软件（ps：只支持mac用户，没有Windows版的~）我装的是CodeRunner3，前天用的还是CodeRunner2，觉得版本高一点可能好用些吧！（其实差不多，好像是多添加了几门支持的编程语言）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="软件" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>C++实现小根堆(再版)+Graphviz和DOT语言绘图</title>
    <link href="http://yoursite.com/2019/09/09/heap/"/>
    <id>http://yoursite.com/2019/09/09/heap/</id>
    <published>2019-09-09T00:37:54.802Z</published>
    <updated>2020-12-16T02:59:01.499Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么是再版？"><a href="#为什么是再版？" class="headerlink" title="为什么是再版？"></a>为什么是再版？</h2><p>  因为觉得CSDN的版面不好看、广告太多、传上去的图片还加水印，所以不喜欢。正好这几天在搞这个博客，就把东西搬过来了。<br>  最近看到了一个程序员画图的好东西——使用Graphviz和DOT语言绘图，瞬间觉得自己以前在<a href="https://www.draw.io" target="_blank" rel="noopener">draw.io</a>上搞了半天整个图太low了，不如直接dot文件描述图是怎么样的，然后终端一行<code>dot -Tpng heap.dot -o heap.png</code>直接生成来的快。生搬有点尬，所以想重构一下，主要是改两点：</p><a id="more"></a><ol><li>换成C++实现小根堆</li><li>使用Graphviz和DOT语言绘图</li></ol><p>之前是用Java实现的，现在看了看觉得写的不好，所以准备用C++写，但代码逻辑几乎是一样的。<br>最后，原文链接——<a href="https://blog.csdn.net/weixin_43160215/article/details/86288375" target="_blank" rel="noopener">Java实现的小根堆</a></p><h2 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h2><p>首先参考了一下<a href="https://mp.weixin.qq.com/s/cq2EhVtOTzTVpNpLDXfeJg" target="_blank" rel="noopener">什么是二叉堆？</a> 此博客也是在看了这篇微信推文的基础上写的。</p><p>什么是二叉堆？</p><p>二叉堆本质上是一种完全二叉树，它分为两个类型：<br><strong>1.最大堆</strong><br><strong>2.最小堆</strong></p><p>什么是最大堆呢？最大堆任何一个父节点的值，都大于等于它左右孩子节点的值。<br><img src="https://img-blog.csdnimg.cn/20190111093041934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE2MDIxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt><br>什么是最小堆呢？最小堆任何一个父节点的值，都小于等于它左右孩子节点的值。<br><img src="https://img-blog.csdnimg.cn/2019011109320816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE2MDIxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt><br>二叉堆的根节点叫做<strong>堆顶</strong>。</p><p>最大堆和最小堆的特点，决定了在最大堆中，堆顶是整个堆中的最大元素；最小堆中，堆顶是整个堆中的最小元素。</p><h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h2><p>一个二叉堆的操作大致有三种，<br><strong>1. 调整堆</strong><br><strong>2. 插入元素</strong><br><strong>3. 取出堆顶元素</strong></p><p>假设给我的一串数字是：【<strong>10 2 4 21 15 13 18 7 11</strong>】 ，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int a[] = &#123;10,2,4,21,15,13,18,7,11&#125;;</span><br></pre></td></tr></table></figure><p>下面过一遍堆的调整、插入和取出。 <strong><em>提醒一点，向上调整（如堆的插入）只比较一次，向下调整（如堆的删除）比较两次。</em></strong>  下面会有提到。</p><h3 id="生成完全二叉树："><a href="#生成完全二叉树：" class="headerlink" title="生成完全二叉树："></a>生成完全二叉树：</h3><p>对于任何一个序列，我们所需要做的是先把它当作一颗完全二叉树，就是下面这样子。<br><img src="https://img-blog.csdnimg.cn/20190111001416128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE2MDIxNQ==,size_16,color_FFFFFF,t_70#pic_center" alt="原序列转成完全图 这里注意是用数组存的"></p><h3 id="调整为小根堆"><a href="#调整为小根堆" class="headerlink" title="调整为小根堆"></a>调整为小根堆</h3><p><strong><em>堆调整是向下调整</em></strong> ，从后往前依次调整每棵子树，每次调整时需要比较两次，<strong><em>子节点之间一次，较小的（对小根堆来说）子节点和根节点之间一次。</em></strong></p><h4 id="向上调整"><a href="#向上调整" class="headerlink" title="向上调整"></a>向上调整</h4><p>先在最后一颗子树上调整：<br><img src="https://s3.ax1x.com/2020/12/15/rMfn5F.png" alt="最后一颗子树"><br>比较子节点。<em>7</em> 更小一点。<br><img src="https://s3.ax1x.com/2020/12/15/rMfSUS.png" alt="7和11比较"></p><p>于是<em>7</em> 和<em>21</em> 比较，发现<em>7</em> 比<em>21</em> 更小。调换两个节点的值。<br><img src="https://s3.ax1x.com/2020/12/15/rMWvHf.png" alt="7胜出并交换节点顺序"><br>往上，调整前一颗子树【<strong>4 13 18</strong>】。比较子节点，<em>13</em>与<em>18</em>比较，<em>13</em>小。<em>13</em>再与<em>4</em>比较，<em>4</em>小。于是此子树也不需要做调整。<br><img src="https://s3.ax1x.com/2020/12/15/rMWjDP.png" alt="13和18比较且13获胜"></p><p>再往上，比较【<strong>2 7 15</strong>】这颗子树，同理还是无需调整。<br><img src="https://s3.ax1x.com/2020/12/15/rMWXut.png" alt="无需调整"></p><p>再往上，比较【<strong>10 2 4</strong>】这颗子树，<em>2</em> 较小，然后<em>2</em> 与<em>10</em> 比较。<br><img src="https://s3.ax1x.com/2020/12/15/rMWLjI.png" alt="2与10比较，2小要上调"></p><p>接下来就是2和10交换，交换之后开始向下调整。</p><h4 id="向下调整"><a href="#向下调整" class="headerlink" title="向下调整"></a>向下调整</h4><p>把<em>10</em>换下来。<strong>注意，<em>7</em>与<em>15</em>比较一次看谁小，然后谁小谁和10比较（即向下时比较两次）</strong>，<em>7</em>较小；因为父节点的值不小于子节点的值，调整<em>7</em>与<em>10</em>的位置，继续向下调整。<br><img src="https://s3.ax1x.com/2020/12/15/rMWzE8.png" alt="7与10比较，7小"></p><blockquote><p>这里插一段上面图的代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">digraph G&#123;</span><br><span class="line">    size = &quot;4,4&quot;;</span><br><span class="line">    node [color = Tan,style = filled];</span><br><span class="line">    </span><br><span class="line">    subgraph cluster1&#123;</span><br><span class="line">        </span><br><span class="line">        bgcolor = mintcream;</span><br><span class="line">        7[color = pink];</span><br><span class="line">        10[color = pink];</span><br><span class="line">    &#125;</span><br><span class="line">    //&#123;rank = same;2&#125;</span><br><span class="line">    2 -&gt; &#123;10 4&#125;;</span><br><span class="line">    4 -&gt; &#123;13 18&#125;;</span><br><span class="line">    10 -&gt; 7 -&gt; &#123;21 11&#125;;</span><br><span class="line">    10 -&gt; 15;</span><br><span class="line">    2[shape = doublecircle;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>保存为.dot，如heap.dot，切到相应路径，终端输入<code>dot -Tpng heap.dot -o heap.png</code>即可得到heap.png。具体可查看<a href="https://graphviz.gitlab.io/_pages/pdf/dotguide.pdf" target="_blank" rel="noopener">doc</a></p></blockquote><p>接下来的调整以及节点的插入和取堆顶元素就不接着说了，我的这篇<a href="https://blog.csdn.net/weixin_43160215/article/details/86288375" target="_blank" rel="noopener">Java实现的小根堆</a>里有，这里调整好的图是：<br><img src="https://s3.ax1x.com/2020/12/15/rMfED0.png" alt="调整的图"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">heapOperator</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; heap;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数，用一个数组初始化堆</span></span><br><span class="line">    heapOperator(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; h)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> item: h)&#123;</span><br><span class="line">            heap.push_back(item);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 数组调整为堆</span></span><br><span class="line">        heapSort();</span><br><span class="line">    &#125;</span><br><span class="line">    heapOperator()&#123;</span><br><span class="line">        <span class="comment">//heapInsert(&lt;#const int &amp;i#&gt;)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 堆调整</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 堆插入</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; i)</span></span>;</span><br><span class="line">    <span class="comment">// 直接取走元素，根据需要也可返回</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fetch</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; "生成的小根堆为: ";</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> item: heap)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; item &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> heapOperator::heapSort()&#123;</span><br><span class="line">    <span class="comment">// 这里是为了不产生警告，换成int也没太大关系</span></span><br><span class="line">    <span class="keyword">long</span> len = heap.size();</span><br><span class="line">    <span class="keyword">long</span> root = len / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 最后一个根节点可能只有一个子节点，可以少比较一次</span></span><br><span class="line">    <span class="keyword">if</span> (len % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(heap[root - <span class="number">1</span>] &gt; heap[len - <span class="number">1</span>])&#123;</span><br><span class="line">            swap(heap[root - <span class="number">1</span>],heap[len - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (root &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// k一直跟着当前的节点，直到此节点被换到叶子结点上</span></span><br><span class="line">        <span class="keyword">long</span> k = root;</span><br><span class="line">        <span class="comment">// len/2 - 1是第一个叶节点的下标</span></span><br><span class="line">        <span class="comment">// 每次向上调整后都还要向下调整，不然就错了</span></span><br><span class="line">        <span class="keyword">while</span> (k &lt;= len / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">// 左子节点在数组中的下标</span></span><br><span class="line">            <span class="keyword">long</span> lNode = <span class="number">2</span> * k - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 右子节点在数组中的下标</span></span><br><span class="line">            <span class="keyword">long</span> rNode = <span class="number">2</span> * k;</span><br><span class="line">            <span class="comment">// 如果左子节点小于等于右子节点</span></span><br><span class="line">            <span class="keyword">if</span>(heap[lNode] &lt;= heap[rNode])&#123;</span><br><span class="line">                <span class="comment">// 同时左子节点小于父节点</span></span><br><span class="line">                <span class="keyword">if</span> (heap[lNode] &lt; heap[k - <span class="number">1</span>]) &#123;</span><br><span class="line">                    swap(heap[lNode], heap[k - <span class="number">1</span>]);</span><br><span class="line">                    <span class="comment">// 记下此节点是数组中第几个值</span></span><br><span class="line">                    k = <span class="number">2</span> * k;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果父节点不小于最小的子节点的值 跳出循环</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">// 若右节点更小一点</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果右子节点小于父节点</span></span><br><span class="line">                <span class="keyword">if</span> (heap[rNode] &lt; heap[k - <span class="number">1</span>]) &#123;</span><br><span class="line">                    swap(heap[rNode], heap[k - <span class="number">1</span>]);</span><br><span class="line">                    <span class="comment">// 记下此节点是数组中第几个值</span></span><br><span class="line">                    k = <span class="number">2</span> * k + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果父节点不小于最小的子节点的值 跳出循环</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        --root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> heapOperator::insert(<span class="keyword">const</span> <span class="keyword">int</span>&amp; i)&#123;</span><br><span class="line">    heap.push_back(i);</span><br><span class="line">    <span class="comment">// 向上比较</span></span><br><span class="line">    <span class="keyword">long</span> len = heap.size();</span><br><span class="line">    <span class="keyword">long</span> k = len, root = len / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// root代表第几个元素，最起码是第一个元素,len = 1情况也随之排除</span></span><br><span class="line">    <span class="keyword">while</span> (root &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (heap[root - <span class="number">1</span>] &gt; heap[k - <span class="number">1</span>]) &#123;</span><br><span class="line">            swap(heap[root - <span class="number">1</span>], heap[k - <span class="number">1</span>]);</span><br><span class="line">            k = root;</span><br><span class="line">            root /= <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> heapOperator::fetch()&#123;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; "已取走最小的元素" &lt;&lt; heap[0] &lt;&lt; endl;</span></span><br><span class="line">    swap(heap[<span class="number">0</span>], heap[heap.size() - <span class="number">1</span>]);</span><br><span class="line">    heap.erase(heap.end() - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 向下调整</span></span><br><span class="line">    <span class="keyword">long</span> root = <span class="number">1</span>, len = heap.size();</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">long</span> lNode = <span class="number">2</span> * root - <span class="number">1</span>, rNode = <span class="number">2</span> * root;</span><br><span class="line">        <span class="comment">// 如果左子节点小于等于右子节点</span></span><br><span class="line">        <span class="keyword">if</span> (heap[lNode] &lt;= heap[rNode]) &#123;</span><br><span class="line">            <span class="comment">// 同时左子节点小于父节点</span></span><br><span class="line">            <span class="keyword">if</span> (heap[lNode] &lt; heap[root - <span class="number">1</span>]) &#123;</span><br><span class="line">                swap(heap[lNode], heap[root - <span class="number">1</span>]);</span><br><span class="line">                <span class="comment">// 记下此节点是数组中第几个值</span></span><br><span class="line">                root = <span class="number">2</span> * root;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果父节点不小于最小的子节点的值 跳出循环</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">// 若右节点更小一点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果右子节点小于父节点</span></span><br><span class="line">            <span class="keyword">if</span> (heap[rNode] &lt; heap[root - <span class="number">1</span>]) &#123;</span><br><span class="line">                swap(heap[rNode], heap[root - <span class="number">1</span>]);</span><br><span class="line">                <span class="comment">// 记下此节点是数组中第几个值</span></span><br><span class="line">                root = <span class="number">2</span> * root + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果父节点不小于最小的子节点的值 跳出循环</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (root &lt;= len / <span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">10</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">21</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">18</span>,<span class="number">7</span>,<span class="number">11</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; aa(a, a+<span class="number">9</span>);</span><br><span class="line">    heapOperator minHeap(aa), testHeap;</span><br><span class="line">    <span class="comment">// 打印一下minHeap</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"打印一下minHeap: "</span>;</span><br><span class="line">    minHeap.print();</span><br><span class="line">    <span class="comment">// 往minHeap插入1</span></span><br><span class="line">    minHeap.insert(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"打印一下minHeap: "</span>;</span><br><span class="line">    minHeap.print();</span><br><span class="line">    <span class="comment">// 测试一下能不能直接插入元素</span></span><br><span class="line">    testHeap.insert(<span class="number">10</span>);</span><br><span class="line">    testHeap.insert(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 打印一下testHeap</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"打印一下testHeap: "</span>;</span><br><span class="line">    testHeap.print();</span><br><span class="line">    testHeap.insert(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"打印一下testHeap: "</span>;</span><br><span class="line">    testHeap.print();</span><br><span class="line">    <span class="comment">//删除两个堆的堆顶元素并打印</span></span><br><span class="line">    minHeap.fetch();</span><br><span class="line">    testHeap.fetch();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"minHeap: "</span>;</span><br><span class="line">    minHeap.print();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"testHeap: "</span>;</span><br><span class="line">    testHeap.print();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>打印一下minHeap: 2 7 4 10 15 13 18 21 11<br>打印一下minHeap: 1 2 4 10 7 13 18 21 11 15<br>打印一下testHeap: 2 10<br>打印一下testHeap: 2 10 3<br>minHeap: 2 7 4 10 15 13 18 21 11<br>testHeap: 2 10<br>Program ended with exit code: 0</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr><ol><li>堆这种数据结构还是比较基础的，用处也比较大。比如堆排序，它是一个能在时间O(nlogn)时间排序的算法。堆的插入和删除都是O(logn)时间的，对于频繁删除和插入元素是比较支持的。</li><li>对于Graphviz和DOT语言绘图，我觉得还是挺好用的，一种好用的东西一开始用都觉得各种不对、各种不会，然后摸索。我写这篇也是，从一开始的图到最后的图，虽然我几乎只是用到了皮毛，但图的变化还是看的到一点点的，用了好几个小时，不一定比上次花的时间少，但我学了点东西，这东西的好处是还可以和Java的Runtime.getruntime一起使用（这个我用过），文档里也说它可以作为库和perl、C++、python可以一起用，感兴趣的可以和我分享一下哈，我也不会～</li><li><strong>留个问题给路过的大佬</strong>！怎么给cluster指定位置呢，我其中有张图没有加框，是因为加框是subgraph的操作，我每次给【<strong>4 18 13</strong>】一加子图，节点4和节点10的位置就互调了，我找了很多解决方法都不行，希望路过的大佬能指点一下，提前谢谢您～<br>下面插张图，您就清楚了。<center> <img style="border-radius: 0.3125em; box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://s3.ax1x.com/2020/12/16/rQOUhR.png"> <br> <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">4应该是2的右节点</div></center>代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">digraph G&#123;</span><br><span class="line">    size = &quot;4,4&quot;;</span><br><span class="line">    node [color = Tan,style = filled];</span><br><span class="line">    </span><br><span class="line">    subgraph cluster1&#123;</span><br><span class="line">        bgcolor = mintcream;</span><br><span class="line">        4;</span><br><span class="line">        18[color = pink];</span><br><span class="line">        13[color = pink];</span><br><span class="line">    &#125;</span><br><span class="line">    //&#123;rank = same;2&#125;</span><br><span class="line">    2 -&gt; &#123;10 4&#125;;</span><br><span class="line">    4 -&gt; &#123;13 18&#125;;</span><br><span class="line">    10 -&gt; 7 -&gt; &#123;21 11&#125;;</span><br><span class="line">    10 -&gt; 15;</span><br><span class="line">    2[shape = doublecircle;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么是再版？&quot;&gt;&lt;a href=&quot;#为什么是再版？&quot; class=&quot;headerlink&quot; title=&quot;为什么是再版？&quot;&gt;&lt;/a&gt;为什么是再版？&lt;/h2&gt;&lt;p&gt;  因为觉得CSDN的版面不好看、广告太多、传上去的图片还加水印，所以不喜欢。正好这几天在搞这个博客，就把东西搬过来了。&lt;br&gt;  最近看到了一个程序员画图的好东西——使用Graphviz和DOT语言绘图，瞬间觉得自己以前在&lt;a href=&quot;https://www.draw.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;draw.io&lt;/a&gt;上搞了半天整个图太low了，不如直接dot文件描述图是怎么样的，然后终端一行&lt;code&gt;dot -Tpng heap.dot -o heap.png&lt;/code&gt;直接生成来的快。生搬有点尬，所以想重构一下，主要是改两点：&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="tree" scheme="http://yoursite.com/tags/tree/"/>
    
      <category term="heap" scheme="http://yoursite.com/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>GNU/Linux VS Linux &amp; Free VS Open Source</title>
    <link href="http://yoursite.com/2019/09/09/Free_Source/"/>
    <id>http://yoursite.com/2019/09/09/Free_Source/</id>
    <published>2019-09-09T00:36:23.764Z</published>
    <updated>2020-12-15T12:27:24.400Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文用于区分计算机中几个常见的名词</strong></p><hr><p><img src="https://www.gnu.org/graphics/heckert_gnu.transp.small.png" alt></p><h2 id="GNU-Linux-VS-Linux"><a href="#GNU-Linux-VS-Linux" class="headerlink" title="GNU/Linux VS Linux"></a>GNU/Linux VS Linux</h2><p><a href="https://www.gnu.org/gnu/gnu-linux-faq.html" target="_blank" rel="noopener">关于GNU/Linux常见问答</a></p><h3 id="GNU是什么？——-GNU是一个操作系统"><a href="#GNU是什么？——-GNU是一个操作系统" class="headerlink" title="GNU是什么？—— GNU是一个操作系统"></a>GNU是什么？—— <a href="https://www.gnu.org/" target="_blank" rel="noopener">GNU是一个操作系统</a></h3><p>GNU其实是一个<a href="https://www.gnu.org/philosophy/free-sw.html" target="_blank" rel="noopener">自由软件</a>操作系统——它尊重其使用者的自由。GNU操作系统包括GNU软件包（专门由GNU工程发布的程序）和由第三方发布的自由软件。GNU的开发使你能够使用电脑而无需安装可能会侵害你自由的软件。</p><a id="more"></a><h3 id="什么是Linux？"><a href="#什么是Linux？" class="headerlink" title="什么是Linux？"></a>什么是Linux？</h3><p>Linux，通常被认为是一套操作系统，实际上它是一系列 <strong><em>Linux 内核</em></strong> 基础上开发的操作系统的总称。日常所见比较多的 Ubuntu、企业常用的 centos 其实是用的 Linux 内核的系统，GNU/Linux也是。</p><h3 id="GNU-Linux？"><a href="#GNU-Linux？" class="headerlink" title="GNU/Linux？"></a>GNU/Linux？</h3><p>GNU是一个类Unix操作系统。它是由多个应用程序、系统库、开发工具乃至游戏构成的程序集合。GNU的开发始于1984年1月，称为GNU工程。GNU的许多程序在GNU工程下发布；我们称之为<a href="https://www.gnu.org/software/" target="_blank" rel="noopener">GNU软件包</a>。</p><p>“GNU”这个名字是“GNU’s Not Unix”的递归首字母缩写词。<a href="https://www.gnu.org/pronunciation/pronunciation.html" target="_blank" rel="noopener">“GNU”的发音为g’noo</a><br>，只有一个音节，发音很像“grew”，但需要把其中的r音替换为n音。</p><p>类Unix操作系统中用于资源分配和硬件管理的程序称为“内核”。GNU所用的典型内核是Linux。该组合叫做GNU/Linux操作系统。GNU/Linux为几百万用户所使用，然而许多人错误地称之为<strong>“Linux”</strong>。</p><h2 id="Free-VS-Open-Source"><a href="#Free-VS-Open-Source" class="headerlink" title="Free VS Open Source"></a>Free VS Open Source</h2><h3 id="自由软件视频：自由软件的发起者Richard-Stallman的TED演讲。"><a href="#自由软件视频：自由软件的发起者Richard-Stallman的TED演讲。" class="headerlink" title="自由软件视频：自由软件的发起者Richard Stallman的TED演讲。"></a><a href="https://www.fsf.org/blogs/rms/20140407-geneva-tedx-talk-free-software-free-society" target="_blank" rel="noopener">自由软件视频</a>：自由软件的发起者<a href="https://en.wikipedia.org/wiki/Richard_Stallman" target="_blank" rel="noopener">Richard Stallman</a>的TED演讲。</h3><h3 id="两篇文章就能回答这个问题。"><a href="#两篇文章就能回答这个问题。" class="headerlink" title="两篇文章就能回答这个问题。"></a>两篇文章就能回答这个问题。</h3><h4 id="为什么“自由软件”好于“开源”"><a href="#为什么“自由软件”好于“开源”" class="headerlink" title="为什么“自由软件”好于“开源”"></a><a href="https://www.gnu.org/philosophy/free-software-for-freedom.zh-cn.html" target="_blank" rel="noopener">为什么“自由软件”好于“开源”</a></h4><blockquote><p>虽然自由软件不以自由命名，也能给你同样的自由，但是使用其他的名字会造成重大的不同：不同的词汇<em>传达不同的理念</em>。</p></blockquote><blockquote><p>1998年，自由软件社区有些人开始使用<a href="https://opensource.org/" target="_blank" rel="noopener">“开源软件”</a>来替代<a href="https://www.gnu.org/philosophy/free-sw.html" target="_blank" rel="noopener">“自由软件”</a>来描述他们的所作所为。“开源”一词迅速关联到不同的方法、不同的哲学、不同的价值，甚至是接受何种许可证的不同标准。现在，自由软件运动与开源运动，已经是<a href="https://www.gnu.org/philosophy/free-software-for-freedom.zh-cn.html#relationship" target="_blank" rel="noopener">各自独立的运动</a>，它们有不同的观点和目标，虽然两者还能一起从事实际的项目。</p></blockquote><blockquote><p>两个运动的根本差别在于它们的价值、它们看待世界的方法。就开源运动而言，软件是否应该开源是一个实际的问题，而不是道德诉求。正如有人指出，“开源是一种开发的方法；自由软件是一场社会运动。”对开源运动来说，非自由软件不是最佳答案。对自由软件运动来说，非自由软件是社会问题，而自由软件是正解。</p></blockquote><h4 id="为什么开源错失了自由软件的重点"><a href="#为什么开源错失了自由软件的重点" class="headerlink" title="为什么开源错失了自由软件的重点"></a><a href="https://www.gnu.org/philosophy/open-source-misses-the-point.html" target="_blank" rel="noopener">为什么开源错失了自由软件的重点</a></h4><blockquote><p>“自由软件”和“开源”基本上指的是同一范围的程序。然而，出于不同的价值观，它们对这些程序的看法大相径庭。自由软件运动为用户的计算自由而战斗；这是一个为自由和公正而战的运动。相反，开源理念重视的是实用优势而不是原则利害。我们因此不赞同开源运动，也不使用开源这个词。</p></blockquote><p><strong>自由软件意味着使用者有运行、复制、发布、研究、修改和改进该软件的自由。</strong><br>更精确地说，自由软件赋予软件使用者四项基本自由：</p><ul><li>不论目的为何，有运行该软件的自由（自由之零）。</li><li>有研究该软件如何工作以及按需改写该软件的自由（自由之一）。取得该软件源代码为达成此目的之前提。</li><li>有重新发布拷贝的自由，这样你可以借此来敦亲睦邻（自由之二）。</li><li>有向公众发布改进版软件的自由（自由之三），这样整个社群都可因此受惠。取得该软件源码为达成此目的之前提。</li></ul><h2 id="黑客和骇客"><a href="#黑客和骇客" class="headerlink" title="黑客和骇客"></a>黑客和骇客</h2><p><strong>作为计算机人士，一些基本概念还是要懂的！</strong>所以额外补充一组词：黑客 VS 骇客</p><h4 id="黑客"><a href="#黑客" class="headerlink" title="黑客"></a>黑客</h4><blockquote><p>他们其实不是江洋大盗，而是真正的侠客。他们专门破解一些软件给普通人免费使用，他们道德高尚，是一群真正热爱计算机、热爱编程的人，他们反对收费软件。Richard Stallman就是黑客，虽然他是美国工程院院士，但是每天都受到监督，因为美国商业人士总是告他。</p></blockquote><h4 id="骇客"><a href="#骇客" class="headerlink" title="骇客"></a>骇客</h4><blockquote><p>他们才是真正的江洋大盗，是以盗取别人信息，破坏网络安全，为此赚取利益的一些人。</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文用于区分计算机中几个常见的名词&lt;/strong&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://www.gnu.org/graphics/heckert_gnu.transp.small.png&quot; alt&gt;&lt;/p&gt;&lt;h2 id=&quot;GNU-Linux-VS-Linux&quot;&gt;&lt;a href=&quot;#GNU-Linux-VS-Linux&quot; class=&quot;headerlink&quot; title=&quot;GNU/Linux VS Linux&quot;&gt;&lt;/a&gt;GNU/Linux VS Linux&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/gnu/gnu-linux-faq.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;关于GNU/Linux常见问答&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;GNU是什么？——-GNU是一个操作系统&quot;&gt;&lt;a href=&quot;#GNU是什么？——-GNU是一个操作系统&quot; class=&quot;headerlink&quot; title=&quot;GNU是什么？—— GNU是一个操作系统&quot;&gt;&lt;/a&gt;GNU是什么？—— &lt;a href=&quot;https://www.gnu.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GNU是一个操作系统&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;GNU其实是一个&lt;a href=&quot;https://www.gnu.org/philosophy/free-sw.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自由软件&lt;/a&gt;操作系统——它尊重其使用者的自由。GNU操作系统包括GNU软件包（专门由GNU工程发布的程序）和由第三方发布的自由软件。GNU的开发使你能够使用电脑而无需安装可能会侵害你自由的软件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="GNU" scheme="http://yoursite.com/tags/GNU/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
</feed>
